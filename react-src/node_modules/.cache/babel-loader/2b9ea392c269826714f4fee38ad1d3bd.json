{"ast":null,"code":"\"use strict\";\n\nconst Fragment = require(\"./fragment\");\nconst util = require(\"./util\");\nconst ops = require(\"./ops\");\nconst PDF = require(\"./object\");\nmodule.exports = class Header extends Fragment {\n  constructor(doc, parent) {\n    super(doc, parent);\n\n    // a header could consist out of multiple FormXObjects and this property is later used keep\n    // track of them\n    this._objects = [];\n\n    // this array keeps track of all page numbers rendered in the header, because their rendering\n    // is postponed\n    this._pageNumbers = [];\n\n    // create new cursor for header context to not inherite bottom offset of document, which the\n    // document receives from having a header\n    this._cursor = this._cursor.clone();\n  }\n\n  /// private API\n\n  // prevent page breaks inside a header\n  async _pageBreak(level) {\n    throw new Error(\"Header is to long (tried to execute a page break inside the header)\");\n  }\n  async _start() {\n    // changing the header will force ending and starting with a new page\n    await this._doc._endPage();\n    await this._setup();\n  }\n  async _setup() {\n    this._cursor.reset();\n\n    // these objects will be written to the document after all FormXObjects are written\n    // it is therefore necessary to keep track of them seperately\n    this._resources = new PDF.Object();\n    this._doc._registerObject(this._resources);\n    this._bbox = new PDF.Object();\n    this._doc._registerObject(this._bbox);\n\n    // a FormXObject will receive a Resources dictionary similar to Page objects, which is\n    // why it is necessary to keep track of used fonts and xobjects\n    this.fonts = new PDF.Dictionary({});\n    this.xobjects = new PDF.Dictionary({});\n\n    // this header object has a similar interface like the page object and it is used as such\n    // until the header has finished rendering (necessary to track the used fonts and xobjects)\n    this._doc._contentObjCreator = this._createObject.bind(this);\n\n    // close current content object and start a new one (by setting the _contentObjCreator object\n    // above, the new content object will be created by calling the header's _createObject\n    // method)\n    await this._doc._startContentObject();\n  }\n  _createObject() {\n    // this is going to be called on each _startContentObject() call as long as the header\n    // is rendered, which creates a FormXObject (instead of the usual plain object)\n    const xobj = new PDF.Object(\"XObject\");\n    xobj.prop(\"Subtype\", \"Form\");\n    xobj.prop(\"FormType\", 1);\n    xobj.prop(\"BBox\", this._bbox.toReference());\n    xobj.prop(\"Resources\", this._resources.toReference());\n    return xobj;\n  }\n\n  // while most parts of the header is static (i.e. rendered only once and then reused), there are\n  // some dynamic parts (e.g. page numbers) which are rendered on each page\n  // these parts are rendered here\n  async _render() {\n    if (this._pageNumbers.length === 0) {\n      return;\n    }\n\n    // lazy load text, because of cyclic dependencies of Fragment\n    const Text = require(\"./text\");\n    for (const instance of this._pageNumbers) {\n      let withPageCount = false;\n      if (instance.fn) {\n        const lhs = instance.fn(1, 1);\n        const rhs = instance.fn(1, 10);\n        withPageCount = lhs.length !== rhs.length;\n      }\n\n      // postpone writing page number until the end of the document, because the total page count\n      // is not known now\n      if (withPageCount) {\n        // since there is only text with an already known font, the fonts dictionary can already\n        // be build\n        const fonts = new PDF.Dictionary({});\n        const font = this._doc._fontInstance(instance.opts.font || this._doc.defaultFont);\n        const fontAlias = this._doc._fontAlias(font);\n        fonts.set(fontAlias, this._doc._fonts[fontAlias].o.toReference());\n\n        // create the FormXObject that is used to render the page numbers\n        const xobj = new PDF.Object(\"XObject\");\n        xobj.prop(\"Subtype\", \"Form\");\n        xobj.prop(\"FormType\", 1);\n        xobj.prop(\"BBox\", new PDF.Array([instance.x, instance.y, instance.x + instance.width, instance.y - instance.height]));\n        xobj.prop(\"Resources\", new PDF.Dictionary({\n          ColorSpace: new PDF.Dictionary({\n            CS1: new PDF.Array([new PDF.Name(\"ICCBased\"), this._doc._colorSpace.toReference()])\n          }),\n          ProcSet: new PDF.Array([new PDF.Name(\"Text\")]),\n          Font: fonts\n        }));\n        this._doc._registerObject(xobj);\n\n        // calculate the number of the currently rendered page\n        const currentPage = this._doc._pages.length;\n\n        // add a handler to the document that will be called when the document is finished up\n        // this is necessary because the total count of pages is not yet known\n        this._doc._finalize.push(async () => {\n          await this._doc._startContentObject(xobj);\n\n          // setup the cursor to the position the page numbers should be rendered at\n          this._cursor.y = instance.y;\n          this._cursor.x = instance.x;\n          this._cursor.width = instance.width;\n\n          // negate document bottomOffset, which is there because of this header\n          this._cursor.bottomOffset = -this._doc._cursor.bottomOffset;\n\n          // create the text representing the page numbers\n          const pageCount = this._doc._pages.length;\n          const str = instance.fn ? instance.fn(currentPage, pageCount) : currentPage;\n\n          // manually render the text\n          const txt = new Text(this._doc, this, instance.opts);\n          txt._parts++;\n          txt._ended = true;\n          await txt._start();\n          await txt._render(str, instance.opts);\n          await txt._end();\n          await this._doc._endContentObject();\n        });\n\n        // render and register the FormXObject to the current page\n        const alias = new PDF.Name(this._doc._aliases.next(\"X\"));\n        this._doc._currentContent._xobjects[alias] = xobj.toReference();\n        await this._doc._write(ops.Do(alias));\n      } else {\n        // if there is now total page count necessary, we can write the current page number directly\n        this._cursor.y = instance.y;\n        this._cursor.x = instance.x;\n        this._cursor.width = instance.width;\n\n        // negate document bottomOffset, which is there because of this header\n        this._cursor.bottomOffset = -this._doc._cursor.bottomOffset;\n        const txt = new Text(this._doc, this, instance.opts);\n        txt._parts++;\n        txt._ended = true;\n        await txt._start();\n        await txt._render(String(this._doc._pages.length), instance.opts);\n        await txt._end();\n      }\n    }\n  }\n  async _end() {\n    // save the height of the header\n    // this is used to correctly offset the cursor when rendering the page\n    this.height = this._doc._cursor.startY - this._doc._cursor.y;\n    await this._doc._endContentObject();\n\n    // collect all fonts and xobjects that are used in the header\n    for (const content of this._doc._contents) {\n      for (const alias in content._fonts) {\n        this.fonts.add(alias, content._fonts[alias]);\n      }\n      for (const alias in content._xobjects) {\n        this.xobjects.add(alias, content._xobjects[alias]);\n      }\n    }\n\n    // create the Resources object for the header's FormXObjects\n    this._resources.content = new PDF.Dictionary({\n      ColorSpace: new PDF.Dictionary({\n        CS1: new PDF.Array([new PDF.Name(\"ICCBased\"), this._doc._colorSpace.toReference()])\n      }),\n      ProcSet: new PDF.Array([new PDF.Name(\"PDF\"), new PDF.Name(\"Text\"), new PDF.Name(\"ImageB\"), new PDF.Name(\"ImageC\"), new PDF.Name(\"ImageI\")]),\n      Font: this.fonts,\n      XObject: this.xobjects\n    });\n    await this._doc._writeObject(this._resources);\n\n    // setup the BBox\n    this._bbox.content = new PDF.Array([this._cursor.startX, this._cursor.startY, this._cursor.startX + this._doc._cursor.width, this._doc._cursor.y]);\n    await this._doc._writeObject(this._bbox);\n\n    // the header can consist out of multiple FormXObjects, which are collected here\n    this._objects = this._doc._contents.map(c => c._object);\n\n    // reset everything\n    this._doc._cursor.reset();\n    this._doc._currentContent = null;\n    this._doc._contents.length = 0;\n    this._doc._contentObjCreator = null;\n    this._cursor.y -= this.height;\n  }\n\n  /// public API\n\n  pageNumber(fn, opts) {\n    if (typeof fn === \"object\") {\n      opts = fn;\n      fn = undefined;\n    }\n    if (!opts || typeof opts !== \"object\") {\n      opts = {};\n    }\n    const font = this._doc._fontInstance(opts.font || this._doc.defaultFont);\n    const fontSize = opts.fontSize || this._doc.defaultFontSize;\n    const lineHeight = opts.lineHeight || this._doc.defaultLineHeight;\n    const height = font.lineHeight(fontSize, true) * lineHeight;\n    const descent = -font.descent(fontSize) * lineHeight;\n    this._begin(null);\n    this._pending.push(() => {\n      this._pageNumbers.push({\n        y: this._cursor.y,\n        x: this._cursor.x,\n        width: this._cursor.width,\n        height: height + descent,\n        opts: opts,\n        fn: fn\n      });\n      this._cursor.y -= height + descent;\n      return Promise.resolve();\n    });\n  }\n};","map":{"version":3,"names":["Fragment","require","util","ops","PDF","module","exports","Header","constructor","doc","parent","_objects","_pageNumbers","_cursor","clone","_pageBreak","level","Error","_start","_doc","_endPage","_setup","reset","_resources","Object","_registerObject","_bbox","fonts","Dictionary","xobjects","_contentObjCreator","_createObject","bind","_startContentObject","xobj","prop","toReference","_render","length","Text","instance","withPageCount","fn","lhs","rhs","font","_fontInstance","opts","defaultFont","fontAlias","_fontAlias","set","_fonts","o","Array","x","y","width","height","ColorSpace","CS1","Name","_colorSpace","ProcSet","Font","currentPage","_pages","_finalize","push","bottomOffset","pageCount","str","txt","_parts","_ended","_end","_endContentObject","alias","_aliases","next","_currentContent","_xobjects","_write","Do","String","startY","content","_contents","add","XObject","_writeObject","startX","map","c","_object","pageNumber","undefined","fontSize","defaultFontSize","lineHeight","defaultLineHeight","descent","_begin","_pending","Promise","resolve"],"sources":["C:/xampp/htdocs/stardust/wp-content/themes/stardust-theme/react-src/node_modules/pdfjs/lib/header.js"],"sourcesContent":["\"use strict\";\n\nconst Fragment = require(\"./fragment\");\nconst util = require(\"./util\");\nconst ops = require(\"./ops\");\nconst PDF = require(\"./object\");\n\nmodule.exports = class Header extends Fragment {\n  constructor(doc, parent) {\n    super(doc, parent);\n\n    // a header could consist out of multiple FormXObjects and this property is later used keep\n    // track of them\n    this._objects = [];\n\n    // this array keeps track of all page numbers rendered in the header, because their rendering\n    // is postponed\n    this._pageNumbers = [];\n\n    // create new cursor for header context to not inherite bottom offset of document, which the\n    // document receives from having a header\n    this._cursor = this._cursor.clone();\n  }\n\n  /// private API\n\n  // prevent page breaks inside a header\n  async _pageBreak(level) {\n    throw new Error(\n      \"Header is to long (tried to execute a page break inside the header)\",\n    );\n  }\n\n  async _start() {\n    // changing the header will force ending and starting with a new page\n    await this._doc._endPage();\n\n    await this._setup();\n  }\n\n  async _setup() {\n    this._cursor.reset();\n\n    // these objects will be written to the document after all FormXObjects are written\n    // it is therefore necessary to keep track of them seperately\n    this._resources = new PDF.Object();\n    this._doc._registerObject(this._resources);\n    this._bbox = new PDF.Object();\n    this._doc._registerObject(this._bbox);\n\n    // a FormXObject will receive a Resources dictionary similar to Page objects, which is\n    // why it is necessary to keep track of used fonts and xobjects\n    this.fonts = new PDF.Dictionary({});\n    this.xobjects = new PDF.Dictionary({});\n\n    // this header object has a similar interface like the page object and it is used as such\n    // until the header has finished rendering (necessary to track the used fonts and xobjects)\n    this._doc._contentObjCreator = this._createObject.bind(this);\n\n    // close current content object and start a new one (by setting the _contentObjCreator object\n    // above, the new content object will be created by calling the header's _createObject\n    // method)\n    await this._doc._startContentObject();\n  }\n\n  _createObject() {\n    // this is going to be called on each _startContentObject() call as long as the header\n    // is rendered, which creates a FormXObject (instead of the usual plain object)\n    const xobj = new PDF.Object(\"XObject\");\n    xobj.prop(\"Subtype\", \"Form\");\n    xobj.prop(\"FormType\", 1);\n    xobj.prop(\"BBox\", this._bbox.toReference());\n    xobj.prop(\"Resources\", this._resources.toReference());\n    return xobj;\n  }\n\n  // while most parts of the header is static (i.e. rendered only once and then reused), there are\n  // some dynamic parts (e.g. page numbers) which are rendered on each page\n  // these parts are rendered here\n  async _render() {\n    if (this._pageNumbers.length === 0) {\n      return;\n    }\n\n    // lazy load text, because of cyclic dependencies of Fragment\n    const Text = require(\"./text\");\n\n    for (const instance of this._pageNumbers) {\n      let withPageCount = false;\n      if (instance.fn) {\n        const lhs = instance.fn(1, 1);\n        const rhs = instance.fn(1, 10);\n        withPageCount = lhs.length !== rhs.length;\n      }\n\n      // postpone writing page number until the end of the document, because the total page count\n      // is not known now\n      if (withPageCount) {\n        // since there is only text with an already known font, the fonts dictionary can already\n        // be build\n        const fonts = new PDF.Dictionary({});\n        const font = this._doc._fontInstance(\n          instance.opts.font || this._doc.defaultFont,\n        );\n        const fontAlias = this._doc._fontAlias(font);\n        fonts.set(fontAlias, this._doc._fonts[fontAlias].o.toReference());\n\n        // create the FormXObject that is used to render the page numbers\n        const xobj = new PDF.Object(\"XObject\");\n        xobj.prop(\"Subtype\", \"Form\");\n        xobj.prop(\"FormType\", 1);\n        xobj.prop(\n          \"BBox\",\n          new PDF.Array([\n            instance.x,\n            instance.y,\n            instance.x + instance.width,\n            instance.y - instance.height,\n          ]),\n        );\n        xobj.prop(\n          \"Resources\",\n          new PDF.Dictionary({\n            ColorSpace: new PDF.Dictionary({\n              CS1: new PDF.Array([\n                new PDF.Name(\"ICCBased\"),\n                this._doc._colorSpace.toReference(),\n              ]),\n            }),\n            ProcSet: new PDF.Array([new PDF.Name(\"Text\")]),\n            Font: fonts,\n          }),\n        );\n        this._doc._registerObject(xobj);\n\n        // calculate the number of the currently rendered page\n        const currentPage = this._doc._pages.length;\n\n        // add a handler to the document that will be called when the document is finished up\n        // this is necessary because the total count of pages is not yet known\n        this._doc._finalize.push(async () => {\n          await this._doc._startContentObject(xobj);\n\n          // setup the cursor to the position the page numbers should be rendered at\n          this._cursor.y = instance.y;\n          this._cursor.x = instance.x;\n          this._cursor.width = instance.width;\n\n          // negate document bottomOffset, which is there because of this header\n          this._cursor.bottomOffset = -this._doc._cursor.bottomOffset;\n\n          // create the text representing the page numbers\n          const pageCount = this._doc._pages.length;\n          const str = instance.fn\n            ? instance.fn(currentPage, pageCount)\n            : currentPage;\n\n          // manually render the text\n          const txt = new Text(this._doc, this, instance.opts);\n          txt._parts++;\n          txt._ended = true;\n          await txt._start();\n          await txt._render(str, instance.opts);\n          await txt._end();\n\n          await this._doc._endContentObject();\n        });\n\n        // render and register the FormXObject to the current page\n        const alias = new PDF.Name(this._doc._aliases.next(\"X\"));\n        this._doc._currentContent._xobjects[alias] = xobj.toReference();\n        await this._doc._write(ops.Do(alias));\n      } else {\n        // if there is now total page count necessary, we can write the current page number directly\n        this._cursor.y = instance.y;\n        this._cursor.x = instance.x;\n        this._cursor.width = instance.width;\n\n        // negate document bottomOffset, which is there because of this header\n        this._cursor.bottomOffset = -this._doc._cursor.bottomOffset;\n\n        const txt = new Text(this._doc, this, instance.opts);\n        txt._parts++;\n        txt._ended = true;\n        await txt._start();\n        await txt._render(String(this._doc._pages.length), instance.opts);\n        await txt._end();\n      }\n    }\n  }\n\n  async _end() {\n    // save the height of the header\n    // this is used to correctly offset the cursor when rendering the page\n    this.height = this._doc._cursor.startY - this._doc._cursor.y;\n\n    await this._doc._endContentObject();\n\n    // collect all fonts and xobjects that are used in the header\n    for (const content of this._doc._contents) {\n      for (const alias in content._fonts) {\n        this.fonts.add(alias, content._fonts[alias]);\n      }\n\n      for (const alias in content._xobjects) {\n        this.xobjects.add(alias, content._xobjects[alias]);\n      }\n    }\n\n    // create the Resources object for the header's FormXObjects\n    this._resources.content = new PDF.Dictionary({\n      ColorSpace: new PDF.Dictionary({\n        CS1: new PDF.Array([\n          new PDF.Name(\"ICCBased\"),\n          this._doc._colorSpace.toReference(),\n        ]),\n      }),\n      ProcSet: new PDF.Array([\n        new PDF.Name(\"PDF\"),\n        new PDF.Name(\"Text\"),\n        new PDF.Name(\"ImageB\"),\n        new PDF.Name(\"ImageC\"),\n        new PDF.Name(\"ImageI\"),\n      ]),\n      Font: this.fonts,\n      XObject: this.xobjects,\n    });\n    await this._doc._writeObject(this._resources);\n\n    // setup the BBox\n    this._bbox.content = new PDF.Array([\n      this._cursor.startX,\n      this._cursor.startY,\n      this._cursor.startX + this._doc._cursor.width,\n      this._doc._cursor.y,\n    ]);\n    await this._doc._writeObject(this._bbox);\n\n    // the header can consist out of multiple FormXObjects, which are collected here\n    this._objects = this._doc._contents.map((c) => c._object);\n\n    // reset everything\n    this._doc._cursor.reset();\n\n    this._doc._currentContent = null;\n    this._doc._contents.length = 0;\n\n    this._doc._contentObjCreator = null;\n\n    this._cursor.y -= this.height;\n  }\n\n  /// public API\n\n  pageNumber(fn, opts) {\n    if (typeof fn === \"object\") {\n      opts = fn;\n      fn = undefined;\n    }\n\n    if (!opts || typeof opts !== \"object\") {\n      opts = {};\n    }\n\n    const font = this._doc._fontInstance(opts.font || this._doc.defaultFont);\n    const fontSize = opts.fontSize || this._doc.defaultFontSize;\n    const lineHeight = opts.lineHeight || this._doc.defaultLineHeight;\n\n    const height = font.lineHeight(fontSize, true) * lineHeight;\n    const descent = -font.descent(fontSize) * lineHeight;\n\n    this._begin(null);\n    this._pending.push(() => {\n      this._pageNumbers.push({\n        y: this._cursor.y,\n        x: this._cursor.x,\n        width: this._cursor.width,\n        height: height + descent,\n        opts: opts,\n        fn: fn,\n      });\n\n      this._cursor.y -= height + descent;\n      return Promise.resolve();\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}