{"ast":null,"code":"\"use strict\";\n\nclass PDFName {\n  constructor(name) {\n    if (name === undefined || name === null) {\n      throw new Error(\"A Name cannot be undefined\");\n    }\n    if (name instanceof PDFName) {\n      return name;\n    }\n    if (name[0] === \"/\") {\n      name = name.substr(1);\n    }\n\n    // white-space characters are not allowed\n    if (name.match(/[\\x00]/)) {\n      throw new Error(\"A Name mustn't contain the null characters\");\n    }\n    name = name.toString();\n\n    // Beginning with PDF 1.2, any character except null (character code 0)\n    // may be included in a name by writing its 2-digit hexadecimal code,\n    // preceded by the number sign character (#)\n    // ... it is recommended but not required for characters whose codes\n    // are outside the range 33 (!) to 126 (~)\n    name = name.replace(/[^\\x21-\\x7e]/g, function (c) {\n      let code = c.charCodeAt(0);\n      // replace unicode characters with `_`\n      if (code > 0xff) {\n        code = 0x5f;\n      }\n      return \"#\" + Number(code).toString(16);\n    });\n\n    // Add # in front of delimiter characters\n    //     25  %\n    //     28  (\n    //     29  )\n    //     2f  /\n    //     3c  <\n    //     3e  >\n    //     5b  [\n    //     5d  ]\n    //     7b  {\n    //     7d  }\n    name = name.replace(/[\\x25\\x28\\x29\\x2f\\x3c\\x3e\\x5b\\x5d\\x7b\\x7d]/g, function (c) {\n      let code = c.charCodeAt(0);\n      return \"#\" + Number(code).toString(16);\n    });\n    this.name = name;\n  }\n  toString() {\n    return \"/\" + this.name;\n  }\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(1) !== \"/\") {\n      if (trial) {\n        return undefined;\n      }\n      throw new Error(\"Name must start with a leading slash, found: \" + lexer.getString(1));\n    }\n    lexer.shift(1);\n    let name = \"\";\n    let done = false;\n    let c;\n    while (!done && (c = lexer._nextCharCode()) >= 0) {\n      switch (true) {\n        case c === 0x28: // (\n        case c === 0x29: // )\n        case c === 0x3c: // <\n        case c === 0x3e: // >\n        case c === 0x5b: // [\n        case c === 0x5d: // ]\n        case c === 0x7b: // {\n        case c === 0x7d: // }\n        case c === 0x2f: // /\n        case c === 0x25:\n          // %\n          done = true;\n          break;\n        case c === 0x23:\n          // #\n          const hex = lexer.readString(2);\n          name += String.fromCharCode(parseInt(hex, 16));\n          break;\n        case c >= 0x22 && c <= 0x7e:\n          // inside range of 33 (!) to 126 (~)\n          name += String.fromCharCode(c);\n          break;\n        default:\n          done = true;\n          break;\n      }\n    }\n    lexer.shift(-1);\n    return new PDFName(name);\n  }\n}\nmodule.exports = PDFName;","map":{"version":3,"names":["PDFName","constructor","name","undefined","Error","substr","match","toString","replace","c","code","charCodeAt","Number","parse","xref","lexer","trial","getString","shift","done","_nextCharCode","hex","readString","String","fromCharCode","parseInt","module","exports"],"sources":["C:/xampp/htdocs/stardust/wp-content/themes/stardust-theme/react-src/node_modules/pdfjs/lib/object/name.js"],"sourcesContent":["\"use strict\";\n\nclass PDFName {\n  constructor(name) {\n    if (name === undefined || name === null) {\n      throw new Error(\"A Name cannot be undefined\");\n    }\n\n    if (name instanceof PDFName) {\n      return name;\n    }\n\n    if (name[0] === \"/\") {\n      name = name.substr(1);\n    }\n\n    // white-space characters are not allowed\n    if (name.match(/[\\x00]/)) {\n      throw new Error(\"A Name mustn't contain the null characters\");\n    }\n\n    name = name.toString();\n\n    // Beginning with PDF 1.2, any character except null (character code 0)\n    // may be included in a name by writing its 2-digit hexadecimal code,\n    // preceded by the number sign character (#)\n    // ... it is recommended but not required for characters whose codes\n    // are outside the range 33 (!) to 126 (~)\n    name = name.replace(/[^\\x21-\\x7e]/g, function (c) {\n      let code = c.charCodeAt(0);\n      // replace unicode characters with `_`\n      if (code > 0xff) {\n        code = 0x5f;\n      }\n      return \"#\" + Number(code).toString(16);\n    });\n\n    // Add # in front of delimiter characters\n    //     25  %\n    //     28  (\n    //     29  )\n    //     2f  /\n    //     3c  <\n    //     3e  >\n    //     5b  [\n    //     5d  ]\n    //     7b  {\n    //     7d  }\n    name = name.replace(\n      /[\\x25\\x28\\x29\\x2f\\x3c\\x3e\\x5b\\x5d\\x7b\\x7d]/g,\n      function (c) {\n        let code = c.charCodeAt(0);\n        return \"#\" + Number(code).toString(16);\n      },\n    );\n\n    this.name = name;\n  }\n\n  toString() {\n    return \"/\" + this.name;\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(1) !== \"/\") {\n      if (trial) {\n        return undefined;\n      }\n\n      throw new Error(\n        \"Name must start with a leading slash, found: \" + lexer.getString(1),\n      );\n    }\n\n    lexer.shift(1);\n\n    let name = \"\";\n\n    let done = false;\n    let c;\n    while (!done && (c = lexer._nextCharCode()) >= 0) {\n      switch (true) {\n        case c === 0x28: // (\n        case c === 0x29: // )\n        case c === 0x3c: // <\n        case c === 0x3e: // >\n        case c === 0x5b: // [\n        case c === 0x5d: // ]\n        case c === 0x7b: // {\n        case c === 0x7d: // }\n        case c === 0x2f: // /\n        case c === 0x25: // %\n          done = true;\n          break;\n        case c === 0x23: // #\n          const hex = lexer.readString(2);\n          name += String.fromCharCode(parseInt(hex, 16));\n          break;\n        case c >= 0x22 && c <= 0x7e: // inside range of 33 (!) to 126 (~)\n          name += String.fromCharCode(c);\n          break;\n        default:\n          done = true;\n          break;\n      }\n    }\n\n    lexer.shift(-1);\n\n    return new PDFName(name);\n  }\n}\n\nmodule.exports = PDFName;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}