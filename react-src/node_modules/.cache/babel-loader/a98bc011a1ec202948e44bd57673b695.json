{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\stardust\\\\wp-content\\\\themes\\\\stardust-theme\\\\react-src\\\\src\\\\pages\\\\newsletters\\\\newsletters.js\";\nimport React, { useEffect, useState } from 'react';\nimport PageTitle from '../../components/pageTItle/pageTitle';\nimport HTMLService from '../../services/htmlService';\nimport NewslettersService from '../../services/newsletterService';\nimport './newsletters.css';\nfunction NewslettersPage() {\n  const [newsletter, setNewsletter] = useState({});\n  const [newsletterList, setNewsletterList] = useState([]);\n  const [pdfUrl, setPdfUrl] = useState('');\n  const [pdf, setPdf] = useState();\n  useEffect(() => {\n    async function getNewsletters() {\n      let response = await NewslettersService.getNewsletters();\n      if (response.length) {\n        setNewsletter(response[0]);\n        setPdfUrl(HTMLService.sanatizeHTML(response[0].content.rendered));\n        if (response.length > 1) {\n          response.shift();\n          setNewsletterList(response);\n        }\n      }\n    }\n    getNewsletters();\n  }, []);\n  useEffect(() => {\n    getPefInfo();\n  }, [pdfUrl]);\n  function getPefInfo() {\n    fetch(pdfUrl).then(response => {\n      // Check if the request was successful (status code 200)\n      if (!response.ok) {\n        throw new Error(`Failed to fetch PDF (${response.status} ${response.statusText})`);\n      }\n      return response.body.getReader(); // Convert response to a Blob\n    }).then(reader => {\n      return new ReadableStream({\n        start(controller) {\n          return pump();\n          function pump() {\n            return reader.read().then(({\n              done,\n              value\n            }) => {\n              // When no more data needs to be consumed, close the stream\n              if (done) {\n                controller.close();\n                return;\n              }\n              // Enqueue the next data chunk into our target stream\n              controller.enqueue(value);\n              return pump();\n            });\n          }\n        }\n      });\n      // Create a URL for the Blob\n      //const pdfBlobUrl = window.URL.createObjectURL(pdfBlob);\n\n      // Open the PDF in a new window or tab\n      //window.open(pdfBlobUrl, '_blank');\n    }).then(stream => {\n      console.log(stream);\n    }).catch(error => {\n      console.error('Error fetching PDF:', error);\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"newsletters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageTitle, {\n    image: \"#\",\n    pageTitle: \"Newsletters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }));\n}\nexport default NewslettersPage;","map":{"version":3,"names":["React","useEffect","useState","PageTitle","HTMLService","NewslettersService","NewslettersPage","newsletter","setNewsletter","newsletterList","setNewsletterList","pdfUrl","setPdfUrl","pdf","setPdf","getNewsletters","response","length","sanatizeHTML","content","rendered","shift","getPefInfo","fetch","then","ok","Error","status","statusText","body","getReader","reader","ReadableStream","start","controller","pump","read","done","value","close","enqueue","stream","console","log","catch","error","createElement","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","image","pageTitle"],"sources":["C:/xampp/htdocs/stardust/wp-content/themes/stardust-theme/react-src/src/pages/newsletters/newsletters.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport PageTitle from '../../components/pageTItle/pageTitle';\r\n\r\nimport HTMLService from '../../services/htmlService';\r\nimport NewslettersService from '../../services/newsletterService';\r\n\r\nimport './newsletters.css';\r\n\r\nfunction NewslettersPage() {\r\n    const [newsletter, setNewsletter] = useState({});\r\n    const [newsletterList, setNewsletterList] = useState([]);\r\n    const [pdfUrl, setPdfUrl] = useState('');\r\n    const [pdf, setPdf] = useState();\r\n\r\n    useEffect(() => {\r\n        async function getNewsletters() {\r\n            let response = await NewslettersService.getNewsletters();\r\n\r\n            if (response.length) {\r\n                setNewsletter(response[0]);\r\n                setPdfUrl(HTMLService.sanatizeHTML(response[0].content.rendered));\r\n\r\n                if (response.length > 1) {\r\n                    response.shift();\r\n                    setNewsletterList(response);\r\n                }\r\n            }\r\n        }\r\n\r\n        getNewsletters();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n      getPefInfo();\r\n    }, [pdfUrl]);\r\n\r\n    function getPefInfo() {\r\n      fetch(pdfUrl)\r\n        .then(response => {\r\n          // Check if the request was successful (status code 200)\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch PDF (${response.status} ${response.statusText})`);\r\n          }\r\n          return response.body.getReader(); // Convert response to a Blob\r\n        })\r\n        .then(reader => {\r\n          return new ReadableStream({\r\n            start(controller) {\r\n              return pump();\r\n              function pump() {\r\n                return reader.read().then(({ done, value }) => {\r\n                  // When no more data needs to be consumed, close the stream\r\n                  if (done) {\r\n                    controller.close();\r\n                    return;\r\n                  }\r\n                  // Enqueue the next data chunk into our target stream\r\n                  controller.enqueue(value);\r\n                  return pump();\r\n                });\r\n              }\r\n            },\r\n          });\r\n          // Create a URL for the Blob\r\n          //const pdfBlobUrl = window.URL.createObjectURL(pdfBlob);\r\n    \r\n          // Open the PDF in a new window or tab\r\n          //window.open(pdfBlobUrl, '_blank');\r\n        })\r\n        .then(stream => {\r\n          console.log(stream);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching PDF:', error);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div id='newsletters'>\r\n            <PageTitle\r\n                image=\"#\"\r\n                pageTitle=\"Newsletters\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewslettersPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}