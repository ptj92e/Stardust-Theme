{"ast":null,"code":"\"use strict\";\n\nconst PDFDictionary = require(\"./dictionary\");\nconst PDFArray = require(\"./array\");\nconst PDFString = require(\"./string\");\nclass PDFTrailer extends PDFDictionary {\n  constructor(size, root, id, infoObj) {\n    super();\n    this.set(\"Size\", size);\n    this.set(\"Root\", root && root.toReference());\n    const encodedId = new PDFString(id).toHexString();\n    this.set(\"ID\", new PDFArray([encodedId, encodedId]));\n    this.set(\"Info\", infoObj.toReference());\n  }\n  toString() {\n    return \"trailer\\n\" + PDFDictionary.prototype.toString.call(this);\n  }\n  static parse(xref, lexer) {\n    lexer.skipWhitespace(null, true);\n    if (lexer.readString(7) !== \"trailer\") {\n      throw new Error(\"Invalid trailer: trailer expected but not found\");\n    }\n    lexer.skipWhitespace(null, true);\n    const dict = PDFDictionary.parse(xref, lexer);\n    return dict;\n  }\n}\nmodule.exports = PDFTrailer;","map":{"version":3,"names":["PDFDictionary","require","PDFArray","PDFString","PDFTrailer","constructor","size","root","id","infoObj","set","toReference","encodedId","toHexString","toString","prototype","call","parse","xref","lexer","skipWhitespace","readString","Error","dict","module","exports"],"sources":["C:/xampp/htdocs/stardust/wp-content/themes/stardust-theme/react-src/node_modules/pdfjs/lib/object/trailer.js"],"sourcesContent":["\"use strict\";\n\nconst PDFDictionary = require(\"./dictionary\");\nconst PDFArray = require(\"./array\");\nconst PDFString = require(\"./string\");\n\nclass PDFTrailer extends PDFDictionary {\n  constructor(size, root, id, infoObj) {\n    super();\n\n    this.set(\"Size\", size);\n    this.set(\"Root\", root && root.toReference());\n\n    const encodedId = new PDFString(id).toHexString();\n    this.set(\"ID\", new PDFArray([encodedId, encodedId]));\n    this.set(\"Info\", infoObj.toReference());\n  }\n\n  toString() {\n    return \"trailer\\n\" + PDFDictionary.prototype.toString.call(this);\n  }\n\n  static parse(xref, lexer) {\n    lexer.skipWhitespace(null, true);\n\n    if (lexer.readString(7) !== \"trailer\") {\n      throw new Error(\"Invalid trailer: trailer expected but not found\");\n    }\n\n    lexer.skipWhitespace(null, true);\n\n    const dict = PDFDictionary.parse(xref, lexer);\n    return dict;\n  }\n}\n\nmodule.exports = PDFTrailer;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC7C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,SAAS,CAAC;AACnC,MAAME,SAAS,GAAGF,OAAO,CAAC,UAAU,CAAC;AAErC,MAAMG,UAAU,SAASJ,aAAa,CAAC;EACrCK,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,EAAE,EAAEC,OAAO,EAAE;IACnC,KAAK,EAAE;IAEP,IAAI,CAACC,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAAC;IACtB,IAAI,CAACI,GAAG,CAAC,MAAM,EAAEH,IAAI,IAAIA,IAAI,CAACI,WAAW,EAAE,CAAC;IAE5C,MAAMC,SAAS,GAAG,IAAIT,SAAS,CAACK,EAAE,CAAC,CAACK,WAAW,EAAE;IACjD,IAAI,CAACH,GAAG,CAAC,IAAI,EAAE,IAAIR,QAAQ,CAAC,CAACU,SAAS,EAAEA,SAAS,CAAC,CAAC,CAAC;IACpD,IAAI,CAACF,GAAG,CAAC,MAAM,EAAED,OAAO,CAACE,WAAW,EAAE,CAAC;EACzC;EAEAG,QAAQA,CAAA,EAAG;IACT,OAAO,WAAW,GAAGd,aAAa,CAACe,SAAS,CAACD,QAAQ,CAACE,IAAI,CAAC,IAAI,CAAC;EAClE;EAEA,OAAOC,KAAKA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACxBA,KAAK,CAACC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;IAEhC,IAAID,KAAK,CAACE,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;MACrC,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;IACpE;IAEAH,KAAK,CAACC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;IAEhC,MAAMG,IAAI,GAAGvB,aAAa,CAACiB,KAAK,CAACC,IAAI,EAAEC,KAAK,CAAC;IAC7C,OAAOI,IAAI;EACb;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGrB,UAAU"},"metadata":{},"sourceType":"script"}