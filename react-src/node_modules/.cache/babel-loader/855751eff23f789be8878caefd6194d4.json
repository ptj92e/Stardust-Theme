{"ast":null,"code":"\"use strict\";\n\nconst PDFName = require(\"./name\");\nconst PDFValue = require(\"./value\");\nclass PDFDictionary {\n  constructor(dictionary) {\n    this.dictionary = {};\n    if (dictionary) {\n      for (const key in dictionary) {\n        this.add(key, dictionary[key]);\n      }\n    }\n  }\n  add(key, val) {\n    if (typeof val === \"string\") {\n      val = new PDFName(val);\n    }\n    this.dictionary[new PDFName(key)] = val;\n  }\n  set(key, val) {\n    this.add(key, val);\n  }\n  has(key) {\n    return String(new PDFName(key)) in this.dictionary;\n  }\n  get(key) {\n    return this.dictionary[new PDFName(key)];\n  }\n  del(key) {\n    delete this.dictionary[new PDFName(key)];\n  }\n  get length() {\n    let length = 0;\n    for (const key in this.dictionary) {\n      length++;\n    }\n    return length;\n  }\n  toString() {\n    let str = \"\";\n    for (const key in this.dictionary) {\n      const val = this.dictionary[key];\n      str += `${key} ${val === null ? \"null\" : val}`.replace(/^/gm, \"\\t\") + \"\\n\";\n    }\n    return `<<\\n${str}>>`;\n  }\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(2) !== \"<<\") {\n      if (trial) {\n        return undefined;\n      }\n      throw new Error(\"Invalid dictionary\");\n    }\n    lexer.shift(2);\n    lexer.skipWhitespace(null, true);\n    const dictionary = new PDFDictionary();\n    while (lexer.getString(2) !== \">>\") {\n      const key = PDFName.parse(xref, lexer);\n      lexer.skipWhitespace(null, true);\n      const value = PDFValue.parse(xref, lexer);\n      dictionary.set(key, value);\n      lexer.skipWhitespace(null, true);\n    }\n    lexer.shift(2);\n    return dictionary;\n  }\n}\nmodule.exports = PDFDictionary;","map":{"version":3,"names":["PDFName","require","PDFValue","PDFDictionary","constructor","dictionary","key","add","val","set","has","String","get","del","length","toString","str","replace","parse","xref","lexer","trial","getString","undefined","Error","shift","skipWhitespace","value","module","exports"],"sources":["C:/xampp/htdocs/stardust/wp-content/themes/stardust-theme/react-src/node_modules/pdfjs/lib/object/dictionary.js"],"sourcesContent":["\"use strict\";\n\nconst PDFName = require(\"./name\");\nconst PDFValue = require(\"./value\");\n\nclass PDFDictionary {\n  constructor(dictionary) {\n    this.dictionary = {};\n    if (dictionary) {\n      for (const key in dictionary) {\n        this.add(key, dictionary[key]);\n      }\n    }\n  }\n\n  add(key, val) {\n    if (typeof val === \"string\") {\n      val = new PDFName(val);\n    }\n    this.dictionary[new PDFName(key)] = val;\n  }\n\n  set(key, val) {\n    this.add(key, val);\n  }\n\n  has(key) {\n    return String(new PDFName(key)) in this.dictionary;\n  }\n\n  get(key) {\n    return this.dictionary[new PDFName(key)];\n  }\n\n  del(key) {\n    delete this.dictionary[new PDFName(key)];\n  }\n\n  get length() {\n    let length = 0;\n    for (const key in this.dictionary) {\n      length++;\n    }\n    return length;\n  }\n\n  toString() {\n    let str = \"\";\n    for (const key in this.dictionary) {\n      const val = this.dictionary[key];\n      str +=\n        `${key} ${val === null ? \"null\" : val}`.replace(/^/gm, \"\\t\") + \"\\n\";\n    }\n    return `<<\\n${str}>>`;\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(2) !== \"<<\") {\n      if (trial) {\n        return undefined;\n      }\n\n      throw new Error(\"Invalid dictionary\");\n    }\n\n    lexer.shift(2);\n    lexer.skipWhitespace(null, true);\n\n    const dictionary = new PDFDictionary();\n\n    while (lexer.getString(2) !== \">>\") {\n      const key = PDFName.parse(xref, lexer);\n      lexer.skipWhitespace(null, true);\n\n      const value = PDFValue.parse(xref, lexer);\n      dictionary.set(key, value);\n\n      lexer.skipWhitespace(null, true);\n    }\n\n    lexer.shift(2);\n\n    return dictionary;\n  }\n}\n\nmodule.exports = PDFDictionary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}