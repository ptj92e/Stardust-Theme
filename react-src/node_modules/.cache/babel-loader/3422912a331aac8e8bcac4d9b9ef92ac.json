{"ast":null,"code":"'use strict';\n\nconst UnicodeTrie = require('unicode-trie');\nconst ref = require('./classes');\nconst {\n  BK,\n  CR,\n  LF,\n  NL,\n  CB,\n  BA,\n  SP,\n  WJ,\n  AI,\n  AL,\n  SA,\n  SG,\n  XX,\n  CJ,\n  ID,\n  NS,\n  characterClasses\n} = require('./classes');\nconst {\n  DI_BRK,\n  IN_BRK,\n  CI_BRK,\n  CP_BRK,\n  PR_BRK,\n  pairTable\n} = require('./pairs');\nconst classTrie = new UnicodeTrie(hex2ab(require('./classes.json').buf));\nclass Break {\n  constructor(position, required) {\n    this.position = position;\n    this.required = required != null ? required : false;\n  }\n}\nmodule.exports = class LineBreaker {\n  constructor(string) {\n    this.string = string;\n    this.pos = 0;\n    this.lastPos = 0;\n    this.curClass = null;\n    this.nextClass = null;\n  }\n  nextCodePoint() {\n    const code = this.string.charCodeAt(this.pos++);\n    const next = this.string.charCodeAt(this.pos);\n\n    // If a surrogate pair\n    if (0xd800 <= code && code <= 0xdbff && 0xdc00 <= next && next <= 0xdfff) {\n      this.pos++;\n      return (code - 0xd800) * 0x400 + (next - 0xdc00) + 0x10000;\n    }\n    return code;\n  }\n  nextCharClass(first) {\n    if (first == null) {\n      first = false;\n    }\n    return mapClass(classTrie.get(this.nextCodePoint()));\n  }\n  nextBreak() {\n    // get the first char if we're at the beginning of the string\n    if (this.curClass == null) {\n      this.curClass = mapFirst(this.nextCharClass());\n    }\n    while (this.pos < this.string.length) {\n      this.lastPos = this.pos;\n      const lastClass = this.nextClass;\n      this.nextClass = this.nextCharClass();\n\n      // explicit newline\n      if (this.curClass === BK || this.curClass === CR && this.nextClass !== LF) {\n        this.curClass = mapFirst(mapClass(this.nextClass));\n        return new Break(this.lastPos, true);\n      }\n\n      // handle classes not handled by the pair table\n      let cur = null;\n      switch (this.nextClass) {\n        case SP:\n          cur = this.curClass;\n          break;\n        case BK:\n        case LF:\n        case NL:\n          cur = BK;\n          break;\n        case CR:\n          cur = CR;\n          break;\n        case CB:\n          cur = BA;\n          break;\n      }\n      if (cur != null) {\n        this.curClass = cur;\n        if (this.nextClass === CB) {\n          return new Break(this.lastPos);\n        }\n        continue;\n      }\n\n      // if not handled already, use the pair table\n      let shouldBreak = false;\n      switch (pairTable[this.curClass][this.nextClass]) {\n        case DI_BRK:\n          // Direct break\n          shouldBreak = true;\n          break;\n        case IN_BRK:\n          // possible indirect break\n          shouldBreak = lastClass === SP;\n          break;\n        case CI_BRK:\n          // prohibited for combining marks\n          shouldBreak = lastClass === SP;\n          if (!shouldBreak) {\n            continue;\n          }\n          break;\n        case CP_BRK:\n          if (lastClass !== SP) {\n            continue;\n          }\n      }\n      this.curClass = this.nextClass;\n      if (shouldBreak) {\n        return new Break(this.lastPos);\n      }\n    }\n    if (this.pos >= this.string.length) {\n      if (this.lastPos < this.string.length) {\n        this.lastPos = this.string.length;\n        return new Break(this.string.length);\n      } else {\n        return null;\n      }\n    }\n  }\n};\nfunction mapClass(c) {\n  switch (c) {\n    case AI:\n      return AL;\n    case SA:\n    case SG:\n    case XX:\n      return AL;\n    case CJ:\n      return NS;\n    default:\n      return c;\n  }\n}\nfunction mapFirst(c) {\n  switch (c) {\n    case LF:\n    case NL:\n      return BK;\n    case CB:\n      return BA;\n    case SP:\n      return WJ;\n    default:\n      return c;\n  }\n}\nfunction hex2ab(hex) {\n  const view = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    view[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n  }\n  return view;\n}","map":{"version":3,"names":["UnicodeTrie","require","ref","BK","CR","LF","NL","CB","BA","SP","WJ","AI","AL","SA","SG","XX","CJ","ID","NS","characterClasses","DI_BRK","IN_BRK","CI_BRK","CP_BRK","PR_BRK","pairTable","classTrie","hex2ab","buf","Break","constructor","position","required","module","exports","LineBreaker","string","pos","lastPos","curClass","nextClass","nextCodePoint","code","charCodeAt","next","nextCharClass","first","mapClass","get","nextBreak","mapFirst","length","lastClass","cur","shouldBreak","c","hex","view","Uint8Array","i","parseInt","substring"],"sources":["C:/xampp/htdocs/stardust/wp-content/themes/stardust-theme/react-src/node_modules/@rkusa/linebreak/src/linebreaker.js"],"sourcesContent":["'use strict'\n\nconst UnicodeTrie = require('unicode-trie')\nconst ref = require('./classes')\nconst { BK, CR, LF, NL, CB, BA, SP, WJ, AI, AL, SA, SG, XX, CJ, ID, NS, characterClasses} = require('./classes')\nconst { DI_BRK, IN_BRK, CI_BRK, CP_BRK, PR_BRK, pairTable } = require('./pairs')\n\nconst classTrie = new UnicodeTrie(hex2ab(require('./classes.json').buf))\n\nclass Break {\n  constructor(position, required) {\n    this.position = position\n    this.required = required != null ? required : false\n  }\n}\n\nmodule.exports = class LineBreaker {\n  constructor(string) {\n    this.string = string\n    this.pos = 0\n    this.lastPos = 0\n    this.curClass = null\n    this.nextClass = null\n  }\n\n  nextCodePoint() {\n    const code = this.string.charCodeAt(this.pos++)\n    const next = this.string.charCodeAt(this.pos)\n\n    // If a surrogate pair\n    if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {\n      this.pos++\n      return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000\n    }\n\n    return code\n  }\n\n  nextCharClass(first) {\n    if (first == null) {\n      first = false\n    }\n    return mapClass(classTrie.get(this.nextCodePoint()))\n  }\n\n  nextBreak() {\n    // get the first char if we're at the beginning of the string\n    if (this.curClass == null) {\n      this.curClass = mapFirst(this.nextCharClass())\n    }\n\n    while (this.pos < this.string.length) {\n      this.lastPos = this.pos\n      const lastClass = this.nextClass\n      this.nextClass = this.nextCharClass()\n\n      // explicit newline\n      if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {\n        this.curClass = mapFirst(mapClass(this.nextClass))\n        return new Break(this.lastPos, true)\n      }\n\n      // handle classes not handled by the pair table\n      let cur = null\n      switch (this.nextClass) {\n        case SP:\n          cur = this.curClass\n          break\n        case BK:\n        case LF:\n        case NL:\n          cur = BK\n          break\n        case CR:\n          cur = CR\n          break\n        case CB:\n          cur = BA\n          break\n      }\n\n      if (cur != null) {\n        this.curClass = cur\n        if (this.nextClass === CB) {\n          return new Break(this.lastPos)\n        }\n        continue\n      }\n\n      // if not handled already, use the pair table\n      let shouldBreak = false\n      switch (pairTable[this.curClass][this.nextClass]) {\n        case DI_BRK: // Direct break\n          shouldBreak = true\n          break\n        case IN_BRK: // possible indirect break\n          shouldBreak = lastClass === SP\n          break\n        case CI_BRK: // prohibited for combining marks\n          shouldBreak = lastClass === SP\n          if (!shouldBreak) {\n            continue\n          }\n          break\n        case CP_BRK:\n          if (lastClass !== SP) {\n            continue\n          }\n      }\n\n      this.curClass = this.nextClass\n      if (shouldBreak) {\n        return new Break(this.lastPos)\n      }\n    }\n\n    if (this.pos >= this.string.length) {\n      if (this.lastPos < this.string.length) {\n        this.lastPos = this.string.length\n        return new Break(this.string.length)\n      } else {\n        return null\n      }\n    }\n  }\n}\n\nfunction mapClass(c) {\n  switch (c) {\n    case AI:\n      return AL\n    case SA:\n    case SG:\n    case XX:\n      return AL\n    case CJ:\n      return NS\n    default:\n      return c\n  }\n}\n\nfunction mapFirst(c) {\n  switch (c) {\n    case LF:\n    case NL:\n      return BK\n    case CB:\n      return BA\n    case SP:\n      return WJ\n    default:\n      return c\n  }\n}\n\nfunction hex2ab(hex) {\n  const view = new Uint8Array(hex.length / 2)\n\n  for (let i = 0; i < hex.length; i += 2) {\n    view[i / 2] = parseInt(hex.substring(i, i + 2), 16)\n  }\n\n  return view\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}