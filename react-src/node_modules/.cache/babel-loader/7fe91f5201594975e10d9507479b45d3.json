{"ast":null,"code":"\"use strict\";\n\nclass Lexer {\n  constructor(buf, outer) {\n    this.buf = buf;\n    this.pos = 0;\n    this.objects = Object.create(null);\n    this._outer = outer;\n    this.state = outer ? outer.state : {};\n  }\n  get outer() {\n    return this._outer || this;\n  }\n  read(len) {\n    const buf = this.buf.subarray(this.pos, this.pos + len);\n    this.pos += len;\n    return buf;\n  }\n  getString(len) {\n    return String.fromCharCode.apply(null, this.buf.subarray(this.pos, this.pos + len));\n  }\n  readString(len) {\n    const str = this.getString(len);\n    this.pos += len;\n    return str;\n  }\n  skipEOL(len, trial) {\n    const before = this.pos;\n    let done = false;\n    let count = 0;\n    while (!done && (!len || count < len)) {\n      switch (this.buf[this.pos]) {\n        case 0x0d:\n          // CR\n          if (this.buf[this.pos + 1] === 0x0a) {\n            // CR LF\n            this.pos++;\n          }\n        // falls through\n        case 0x0a:\n          // LF\n          this.pos++;\n          count++;\n          break;\n        default:\n          done = true;\n          break;\n      }\n    }\n    if (!count || len && count < len) {\n      if (!trial) {\n        this._error(\"EOL expected but not found\");\n      }\n      this.pos = before;\n      return false;\n    }\n    return true;\n  }\n  skipComments(trial) {\n    if (this.getString(1) !== \"%\") {\n      return false;\n    }\n    let pos = this.pos;\n    while (this.buf[pos] !== 0x0a) {\n      pos++;\n    }\n    if (!trial) {\n      this.pos = pos;\n    }\n    return true;\n  }\n  skipWhitespace(len, trial) {\n    const before = this.pos;\n    let done = false;\n    let count = 0;\n    while (!done && (!len || count < len)) {\n      // skip comments\n      if (this.buf[this.pos] === 0x25 /* % */) {\n        while (this.buf[this.pos] !== 0x0a) {\n          this.pos++;\n        }\n      }\n      if (Lexer.isWhiteSpace(this.buf[this.pos])) {\n        this.pos++;\n        count++;\n      } else {\n        done = true;\n      }\n    }\n    if (!count || len && count < len) {\n      if (!trial) {\n        this._error(\"Whitespace expected but not found\");\n      }\n      this.pos = before;\n      return false;\n    }\n    return true;\n  }\n  skipSpace(len, trial) {\n    const before = this.pos;\n    let done = false;\n    let count = 0;\n    while (!done && (!len || count < len)) {\n      if (this.buf[this.pos] === 0x20) {\n        this.pos++;\n        count++;\n      } else {\n        done = true;\n      }\n    }\n    if (len > 0 && !count || len && count < len) {\n      if (!trial) {\n        this._error(\"Space expected but not found\");\n      }\n      this.pos = before;\n      return false;\n    }\n    return true;\n  }\n  shift(offset) {\n    this.pos += offset;\n  }\n  _nextCharCode() {\n    return this.buf[this.pos++];\n  }\n  _nextChar() {\n    return String.fromCharCode(this.buf[this.pos++]);\n  }\n  _error(err) {\n    throw new Error(err);\n  }\n  _warning(warning) {\n    console.warn(warning);\n  }\n\n  // e.g. 123 43445 +17 −98 0 34.5 −3.62 +123.6 4. −.002 0.0\n  readNumber(trial) {\n    const before = this.pos;\n    let c = this._nextCharCode();\n    let sign = 1;\n    let isFloat = false;\n    let str = \"\";\n    switch (true) {\n      case c === 0x2b:\n        // '+'\n        break;\n      case c === 0x2d:\n        // '-'\n        sign = -1;\n        break;\n      case c === 0x2e:\n        // '.'\n        isFloat = true;\n        str = \"0.\";\n        break;\n      case c < 0x30 || c > 0x39:\n        // not a number\n        if (!trial) {\n          this._error(\"Invalid number at \" + this.pos + \": \" + String.fromCharCode(c) + \" (code: \" + c + \")\");\n        }\n        this.pos = before;\n        return undefined;\n      default:\n        str += String.fromCharCode(c);\n        break;\n    }\n    let done = false;\n    while (!done && (c = this._nextCharCode()) >= 0) {\n      switch (true) {\n        case c === 0x2e:\n          // '.'\n          if (isFloat) {\n            done = true;\n          } else {\n            isFloat = true;\n            str += \".\";\n          }\n          break;\n        case c >= 0x30 && c <= 0x39:\n          // 0 - 9\n          str += String.fromCharCode(c);\n          break;\n        default:\n          done = true;\n          break;\n      }\n    }\n    this.pos--;\n    const nr = isFloat ? parseFloat(str, 10) : parseInt(str, 10);\n    return nr * sign;\n  }\n  static isWhiteSpace(c) {\n    return c === 0x00 ||\n    // NULL\n    c === 0x09 ||\n    // TAB\n    c === 0x0a ||\n    // LF\n    c === 0x0c ||\n    // FF\n    c === 0x0d ||\n    // CR\n    c === 0x20 // SP\n    ;\n  }\n}\n\nmodule.exports = Lexer;","map":{"version":3,"names":["Lexer","constructor","buf","outer","pos","objects","Object","create","_outer","state","read","len","subarray","getString","String","fromCharCode","apply","readString","str","skipEOL","trial","before","done","count","_error","skipComments","skipWhitespace","isWhiteSpace","skipSpace","shift","offset","_nextCharCode","_nextChar","err","Error","_warning","warning","console","warn","readNumber","c","sign","isFloat","undefined","nr","parseFloat","parseInt","module","exports"],"sources":["C:/xampp/htdocs/stardust/wp-content/themes/stardust-theme/react-src/node_modules/pdfjs/lib/parser/lexer.js"],"sourcesContent":["\"use strict\";\n\nclass Lexer {\n  constructor(buf, outer) {\n    this.buf = buf;\n    this.pos = 0;\n    this.objects = Object.create(null);\n    this._outer = outer;\n    this.state = outer ? outer.state : {};\n  }\n\n  get outer() {\n    return this._outer || this;\n  }\n\n  read(len) {\n    const buf = this.buf.subarray(this.pos, this.pos + len);\n    this.pos += len;\n    return buf;\n  }\n\n  getString(len) {\n    return String.fromCharCode.apply(\n      null,\n      this.buf.subarray(this.pos, this.pos + len),\n    );\n  }\n\n  readString(len) {\n    const str = this.getString(len);\n    this.pos += len;\n    return str;\n  }\n\n  skipEOL(len, trial) {\n    const before = this.pos;\n\n    let done = false;\n    let count = 0;\n    while (!done && (!len || count < len)) {\n      switch (this.buf[this.pos]) {\n        case 0x0d: // CR\n          if (this.buf[this.pos + 1] === 0x0a) {\n            // CR LF\n            this.pos++;\n          }\n        // falls through\n        case 0x0a: // LF\n          this.pos++;\n          count++;\n          break;\n        default:\n          done = true;\n          break;\n      }\n    }\n\n    if (!count || (len && count < len)) {\n      if (!trial) {\n        this._error(\"EOL expected but not found\");\n      }\n      this.pos = before;\n      return false;\n    }\n\n    return true;\n  }\n\n  skipComments(trial) {\n    if (this.getString(1) !== \"%\") {\n      return false;\n    }\n\n    let pos = this.pos;\n    while (this.buf[pos] !== 0x0a) {\n      pos++;\n    }\n\n    if (!trial) {\n      this.pos = pos;\n    }\n\n    return true;\n  }\n\n  skipWhitespace(len, trial) {\n    const before = this.pos;\n\n    let done = false;\n    let count = 0;\n    while (!done && (!len || count < len)) {\n      // skip comments\n      if (this.buf[this.pos] === 0x25 /* % */) {\n        while (this.buf[this.pos] !== 0x0a) {\n          this.pos++;\n        }\n      }\n\n      if (Lexer.isWhiteSpace(this.buf[this.pos])) {\n        this.pos++;\n        count++;\n      } else {\n        done = true;\n      }\n    }\n\n    if (!count || (len && count < len)) {\n      if (!trial) {\n        this._error(\"Whitespace expected but not found\");\n      }\n      this.pos = before;\n      return false;\n    }\n\n    return true;\n  }\n\n  skipSpace(len, trial) {\n    const before = this.pos;\n\n    let done = false;\n    let count = 0;\n    while (!done && (!len || count < len)) {\n      if (this.buf[this.pos] === 0x20) {\n        this.pos++;\n        count++;\n      } else {\n        done = true;\n      }\n    }\n\n    if ((len > 0 && !count) || (len && count < len)) {\n      if (!trial) {\n        this._error(\"Space expected but not found\");\n      }\n      this.pos = before;\n      return false;\n    }\n\n    return true;\n  }\n\n  shift(offset) {\n    this.pos += offset;\n  }\n\n  _nextCharCode() {\n    return this.buf[this.pos++];\n  }\n\n  _nextChar() {\n    return String.fromCharCode(this.buf[this.pos++]);\n  }\n\n  _error(err) {\n    throw new Error(err);\n  }\n\n  _warning(warning) {\n    console.warn(warning);\n  }\n\n  // e.g. 123 43445 +17 −98 0 34.5 −3.62 +123.6 4. −.002 0.0\n  readNumber(trial) {\n    const before = this.pos;\n\n    let c = this._nextCharCode();\n    let sign = 1;\n    let isFloat = false;\n    let str = \"\";\n\n    switch (true) {\n      case c === 0x2b: // '+'\n        break;\n      case c === 0x2d: // '-'\n        sign = -1;\n        break;\n      case c === 0x2e: // '.'\n        isFloat = true;\n        str = \"0.\";\n        break;\n      case c < 0x30 || c > 0x39: // not a number\n        if (!trial) {\n          this._error(\n            \"Invalid number at \" +\n              this.pos +\n              \": \" +\n              String.fromCharCode(c) +\n              \" (code: \" +\n              c +\n              \")\",\n          );\n        }\n        this.pos = before;\n        return undefined;\n      default:\n        str += String.fromCharCode(c);\n        break;\n    }\n\n    let done = false;\n    while (!done && (c = this._nextCharCode()) >= 0) {\n      switch (true) {\n        case c === 0x2e: // '.'\n          if (isFloat) {\n            done = true;\n          } else {\n            isFloat = true;\n            str += \".\";\n          }\n          break;\n        case c >= 0x30 && c <= 0x39: // 0 - 9\n          str += String.fromCharCode(c);\n          break;\n        default:\n          done = true;\n          break;\n      }\n    }\n\n    this.pos--;\n\n    const nr = isFloat ? parseFloat(str, 10) : parseInt(str, 10);\n    return nr * sign;\n  }\n\n  static isWhiteSpace(c) {\n    return (\n      c === 0x00 || // NULL\n      c === 0x09 || // TAB\n      c === 0x0a || // LF\n      c === 0x0c || // FF\n      c === 0x0d || // CR\n      c === 0x20 // SP\n    );\n  }\n}\n\nmodule.exports = Lexer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}